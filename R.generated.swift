//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 8 storyboards.
  struct storyboard {
    /// Storyboard `Details`.
    static let details = _R.storyboard.details()
    /// Storyboard `GameEvent`.
    static let gameEvent = _R.storyboard.gameEvent()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Menu`.
    static let menu = _R.storyboard.menu()
    /// Storyboard `Search`.
    static let search = _R.storyboard.search()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `ZoomImage`.
    static let zoomImage = _R.storyboard.zoomImage()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Details", bundle: ...)`
    static func details(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.details)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "GameEvent", bundle: ...)`
    static func gameEvent(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.gameEvent)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Menu", bundle: ...)`
    static func menu(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.menu)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Search", bundle: ...)`
    static func search(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.search)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ZoomImage", bundle: ...)`
    static func zoomImage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.zoomImage)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `main_color`.
    static let main_color = Rswift.ColorResource(bundle: R.hostingBundle, name: "main_color")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "main_color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func main_color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.main_color, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    /// Resource file `loading.json`.
    static let loadingJson = Rswift.FileResource(bundle: R.hostingBundle, name: "loading", pathExtension: "json")

    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "loading", withExtension: "json")`
    static func loadingJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.loadingJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 16 images.
  struct image {
    /// Image `all`.
    static let all = Rswift.ImageResource(bundle: R.hostingBundle, name: "all")
    /// Image `confirm_disable`.
    static let confirm_disable = Rswift.ImageResource(bundle: R.hostingBundle, name: "confirm_disable")
    /// Image `confirm`.
    static let confirm = Rswift.ImageResource(bundle: R.hostingBundle, name: "confirm")
    /// Image `fail`.
    static let fail = Rswift.ImageResource(bundle: R.hostingBundle, name: "fail")
    /// Image `ic_ar`.
    static let ic_ar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_ar")
    /// Image `ic_bs`.
    static let ic_bs = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_bs")
    /// Image `ic_dr`.
    static let ic_dr = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_dr")
    /// Image `ic_lan`.
    static let ic_lan = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_lan")
    /// Image `ic_mag`.
    static let ic_mag = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_mag")
    /// Image `ic_nac`.
    static let ic_nac = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_nac")
    /// Image `ic_sab`.
    static let ic_sab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sab")
    /// Image `ic_sw`.
    static let ic_sw = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_sw")
    /// Image `ic_tsw`.
    static let ic_tsw = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_tsw")
    /// Image `ic_var`.
    static let ic_var = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_var")
    /// Image `ic_war`.
    static let ic_war = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_war")
    /// Image `search_image`.
    static let search_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "search_image")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "all", bundle: ..., traitCollection: ...)`
    static func all(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.all, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confirm", bundle: ..., traitCollection: ...)`
    static func confirm(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confirm, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "confirm_disable", bundle: ..., traitCollection: ...)`
    static func confirm_disable(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.confirm_disable, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fail", bundle: ..., traitCollection: ...)`
    static func fail(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fail, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_ar", bundle: ..., traitCollection: ...)`
    static func ic_ar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_ar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_bs", bundle: ..., traitCollection: ...)`
    static func ic_bs(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_bs, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_dr", bundle: ..., traitCollection: ...)`
    static func ic_dr(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_dr, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_lan", bundle: ..., traitCollection: ...)`
    static func ic_lan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_lan, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_mag", bundle: ..., traitCollection: ...)`
    static func ic_mag(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_mag, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_nac", bundle: ..., traitCollection: ...)`
    static func ic_nac(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_nac, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sab", bundle: ..., traitCollection: ...)`
    static func ic_sab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_sw", bundle: ..., traitCollection: ...)`
    static func ic_sw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_sw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_tsw", bundle: ..., traitCollection: ...)`
    static func ic_tsw(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_tsw, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_var", bundle: ..., traitCollection: ...)`
    static func ic_var(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_var, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic_war", bundle: ..., traitCollection: ...)`
    static func ic_war(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_war, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "search_image", bundle: ..., traitCollection: ...)`
    static func search_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.search_image, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 5 nibs.
  struct nib {
    /// Nib `GameEventTableViewCell`.
    static let gameEventTableViewCell = _R.nib._GameEventTableViewCell()
    /// Nib `LoadingView`.
    static let loadingView = _R.nib._LoadingView()
    /// Nib `MenuTableViewCell`.
    static let menuTableViewCell = _R.nib._MenuTableViewCell()
    /// Nib `RoleTableViewCell`.
    static let roleTableViewCell = _R.nib._RoleTableViewCell()
    /// Nib `SettingsTableViewCell`.
    static let settingsTableViewCell = _R.nib._SettingsTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GameEventTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gameEventTableViewCell) instead")
    static func gameEventTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameEventTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LoadingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.loadingView) instead")
    static func loadingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuTableViewCell) instead")
    static func menuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RoleTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.roleTableViewCell) instead")
    static func roleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.roleTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SettingsTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.settingsTableViewCell) instead")
    static func settingsTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsTableViewCell)
    }
    #endif

    static func gameEventTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GameEventTableViewCell? {
      return R.nib.gameEventTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameEventTableViewCell
    }

    static func loadingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.loadingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuTableViewCell? {
      return R.nib.menuTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuTableViewCell
    }

    static func roleTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RoleTableViewCell? {
      return R.nib.roleTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RoleTableViewCell
    }

    static func settingsTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTableViewCell? {
      return R.nib.settingsTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 2 localization keys.
    struct infoPlist {
      /// en translation: Colopl Rune Story Figure For 白猫プロジェクト
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let cfBundleDisplayName = Rswift.StringResource(key: "CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)
      /// en translation: Colopl Rune Story Figure For 白猫プロジェクト
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let cfBundleName = Rswift.StringResource(key: "CFBundleName", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)

      /// en translation: Colopl Rune Story Figure For 白猫プロジェクト
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func cfBundleDisplayName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "CFBundleDisplayName"
        }

        return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      /// en translation: Colopl Rune Story Figure For 白猫プロジェクト
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func cfBundleName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("CFBundleName", tableName: "InfoPlist", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "InfoPlist", preferredLanguages: preferredLanguages) else {
          return "CFBundleName"
        }

        return NSLocalizedString("CFBundleName", tableName: "InfoPlist", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 13 localization keys.
    struct localizable {
      /// en translation: 6th All Character(More pictures)
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let menu_sixth_character = Rswift.StringResource(key: "menu_sixth_character", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let common_english = Rswift.StringResource(key: "common_english", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)
      /// en translation: Game Event
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let menu_game_event = Rswift.StringResource(key: "menu_game_event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)
      /// en translation: History
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let menu_history = Rswift.StringResource(key: "menu_history", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)
      /// en translation: Japanese
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let common_japanese = Rswift.StringResource(key: "common_japanese", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)
      /// en translation: Korean
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let common_korean = Rswift.StringResource(key: "common_korean", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)
      /// en translation: Language
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let settings_language = Rswift.StringResource(key: "settings_language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)
      /// en translation: Main Page
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let menu_main_page = Rswift.StringResource(key: "menu_main_page", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)
      /// en translation: Phone Wallpaper
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let menu_phone_wallpaper = Rswift.StringResource(key: "menu_phone_wallpaper", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)
      /// en translation: Remove Cache
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let settings_remove_cache = Rswift.StringResource(key: "settings_remove_cache", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let menu_settings = Rswift.StringResource(key: "menu_settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)
      /// en translation: Switch Language
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let settings_switch_language = Rswift.StringResource(key: "settings_switch_language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)
      /// en translation: Traditional
      ///
      /// Locales: en, ja, ko, zh-Hant
      static let common_traditional = Rswift.StringResource(key: "common_traditional", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "zh-Hant"], comment: nil)

      /// en translation: 6th All Character(More pictures)
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func menu_sixth_character(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_sixth_character", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_sixth_character"
        }

        return NSLocalizedString("menu_sixth_character", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func common_english(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_english", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_english"
        }

        return NSLocalizedString("common_english", bundle: bundle, comment: "")
      }

      /// en translation: Game Event
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func menu_game_event(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_game_event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_game_event"
        }

        return NSLocalizedString("menu_game_event", bundle: bundle, comment: "")
      }

      /// en translation: History
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func menu_history(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_history", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_history"
        }

        return NSLocalizedString("menu_history", bundle: bundle, comment: "")
      }

      /// en translation: Japanese
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func common_japanese(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_japanese", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_japanese"
        }

        return NSLocalizedString("common_japanese", bundle: bundle, comment: "")
      }

      /// en translation: Korean
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func common_korean(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_korean", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_korean"
        }

        return NSLocalizedString("common_korean", bundle: bundle, comment: "")
      }

      /// en translation: Language
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func settings_language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings_language"
        }

        return NSLocalizedString("settings_language", bundle: bundle, comment: "")
      }

      /// en translation: Main Page
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func menu_main_page(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_main_page", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_main_page"
        }

        return NSLocalizedString("menu_main_page", bundle: bundle, comment: "")
      }

      /// en translation: Phone Wallpaper
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func menu_phone_wallpaper(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_phone_wallpaper", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_phone_wallpaper"
        }

        return NSLocalizedString("menu_phone_wallpaper", bundle: bundle, comment: "")
      }

      /// en translation: Remove Cache
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func settings_remove_cache(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_remove_cache", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings_remove_cache"
        }

        return NSLocalizedString("settings_remove_cache", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func menu_settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("menu_settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "menu_settings"
        }

        return NSLocalizedString("menu_settings", bundle: bundle, comment: "")
      }

      /// en translation: Switch Language
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func settings_switch_language(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings_switch_language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings_switch_language"
        }

        return NSLocalizedString("settings_switch_language", bundle: bundle, comment: "")
      }

      /// en translation: Traditional
      ///
      /// Locales: en, ja, ko, zh-Hant
      static func common_traditional(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common_traditional", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common_traditional"
        }

        return NSLocalizedString("common_traditional", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _GameEventTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GameEventTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GameEventTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameEventTableViewCell
      }

      fileprivate init() {}
    }

    struct _LoadingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoadingView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MenuTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MenuTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuTableViewCell
      }

      fileprivate init() {}
    }

    struct _RoleTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RoleTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RoleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RoleTableViewCell
      }

      fileprivate init() {}
    }

    struct _SettingsTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingsTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SettingsTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try details.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try gameEvent.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try menu.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try search.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try zoomImage.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct details: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let detailsViewController = StoryboardViewControllerResource<DetailsViewController>(identifier: "DetailsViewController")
      let name = "Details"

      func detailsViewController(_: Void = ()) -> DetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detailsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.details().detailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detailsViewController' could not be loaded from storyboard 'Details' as 'DetailsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct gameEvent: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let gameEventViewController = StoryboardViewControllerResource<GameEventViewController>(identifier: "GameEventViewController")
      let name = "GameEvent"

      func gameEventViewController(_: Void = ()) -> GameEventViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gameEventViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.gameEvent().gameEventViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gameEventViewController' could not be loaded from storyboard 'GameEvent' as 'GameEventViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainViewController

      let bundle = R.hostingBundle
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"

      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct menu: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let menuViewController = StoryboardViewControllerResource<MenuViewController>(identifier: "MenuViewController")
      let name = "Menu"

      func menuViewController(_: Void = ()) -> MenuViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: menuViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "main_color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'main_color' is used in storyboard 'Menu', but couldn't be loaded.") }
        }
        if _R.storyboard.menu().menuViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'menuViewController' could not be loaded from storyboard 'Menu' as 'MenuViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct search: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Search"
      let searchViewController = StoryboardViewControllerResource<SearchViewController>(identifier: "SearchViewController")

      func searchViewController(_: Void = ()) -> SearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "confirm_disable", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'confirm_disable' is used in storyboard 'Search', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.search().searchViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchViewController' could not be loaded from storyboard 'Search' as 'SearchViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Settings"
      let settingsViewController = StoryboardViewControllerResource<SettingsViewController>(identifier: "SettingsViewController")

      func settingsViewController(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.settings().settingsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsViewController' could not be loaded from storyboard 'Settings' as 'SettingsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct zoomImage: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ZoomImage"
      let zoomImageViewController = StoryboardViewControllerResource<ZoomImageViewController>(identifier: "ZoomImageViewController")

      func zoomImageViewController(_: Void = ()) -> ZoomImageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: zoomImageViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.zoomImage().zoomImageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'zoomImageViewController' could not be loaded from storyboard 'ZoomImage' as 'ZoomImageViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
